{
  "$schema": "https://ui.shadcn.com/schema/registry-item.json",
  "name": "auth-facebook",
  "type": "registry:file",
  "files": [
    {
      "path": "registry/auth/providers/facebook.ts.hbs",
      "content": "import { Facebook } from 'arctic'\n\nimport type { ProviderUserData } from '@/server/auth/providers/base'\nimport { BaseProvider } from '@/server/auth/providers/base'\n\ninterface FacebookUserResponse {\n  id: string\n  email: string\n  name: string\n  picture: { data: { url: string } }\n}\n\nexport class FacebookProvider extends BaseProvider {\n  protected provider = new Facebook(\n    process.env.FACEBOOK_CLIENT_ID ?? '',\n    process.env.FACEBOOK_CLIENT_SECRET ?? '',\n    this.createCallbackUrl('facebook'),\n  )\n\n  protected readonly API_URL = 'https://graph.facebook.com/me'\n  protected readonly SCOPES = ['email', 'public_profile']\n\n  public createAuthorizationURL(\n    state: string,\n    _codeVerifier: string | null,\n  ): URL {\n    return this.provider.createAuthorizationURL(state, this.SCOPES)\n  }\n\n  public async fetchUserData(\n    code: string,\n    _codeVerifier: string | null,\n  ): Promise<ProviderUserData> {\n    const tokens = await this.provider.validateAuthorizationCode(code)\n    const accessToken = tokens.accessToken()\n\n    const searchParams = new URLSearchParams()\n    searchParams.set('access_token', accessToken)\n    searchParams.set('fields', ['id', 'name', 'picture', 'email'].join(','))\n    const response = await fetch(`${this.API_URL}?${searchParams.toString()}`)\n    if (!response.ok) {\n      const errorText = await response.text().catch(() => 'Unknown error')\n      throw new Error(`Facebook API error (${response.status}): ${errorText}`)\n    }\n\n    const user = (await response.json()) as FacebookUserResponse\n\n    return {\n      accountId: user.id,\n      email: user.email,\n      name: user.name,\n      image: user.picture.data.url,\n    }\n  }\n}\n",
      "type": "registry:file",
      "target": "server/auth/providers/facebook.ts"
    }
  ]
}