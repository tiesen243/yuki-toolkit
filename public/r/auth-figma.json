{
  "$schema": "https://ui.shadcn.com/schema/registry-item.json",
  "name": "auth-figma",
  "type": "registry:file",
  "files": [
    {
      "path": "registry/auth/providers/figma.ts.hbs",
      "content": "import { Figma } from 'arctic'\n\nimport type { ProviderUserData } from '@/server/auth/providers/base'\nimport { BaseProvider } from '@/server/auth/providers/base'\n\ninterface FigmaUserResponse {\n  id: string\n  email: string\n  handle: string\n  img_url: string\n}\n\nexport class FigmaProvider extends BaseProvider {\n  protected provider = new Figma(\n    process.env.FIGMA_CLIENT_ID ?? '',\n    process.env.FIGMA_CLIENT_SECRET ?? '',\n    this.createCallbackUrl('figma'),\n  )\n\n  protected readonly API_URL = 'https://api.figma.com/v1/me'\n  protected readonly SCOPES = ['current_user:read']\n\n  public createAuthorizationURL(\n    state: string,\n    _codeVerifier: string | null,\n  ): URL {\n    return this.provider.createAuthorizationURL(state, this.SCOPES)\n  }\n\n  public async fetchUserData(\n    code: string,\n    _codeVerifier: string | null,\n  ): Promise<ProviderUserData> {\n    const tokens = await this.provider.validateAuthorizationCode(code)\n    const accessToken = tokens.accessToken()\n\n    const response = await fetch(this.API_URL, {\n      headers: { Authorization: `Bearer ${accessToken}` },\n    })\n    if (!response.ok) {\n      const errorText = await response.text().catch(() => 'Unknown error')\n      throw new Error(`Google API error (${response.status}): ${errorText}`)\n    }\n\n    const user = (await response.json()) as FigmaUserResponse\n\n    return {\n      accountId: user.id,\n      email: user.email,\n      name: user.handle,\n      image: user.img_url,\n    }\n  }\n}\n",
      "type": "registry:file",
      "target": "server/auth/providers/figma.ts"
    }
  ]
}