{
  "$schema": "https://ui.shadcn.com/schema/registry-item.json",
  "name": "auth-github",
  "type": "registry:file",
  "files": [
    {
      "path": "registry/auth/providers/github.ts.hbs",
      "content": "import { GitHub } from 'arctic'\n\nimport type { ProviderUserData } from '@/server/auth/providers/base'\nimport { BaseProvider } from '@/server/auth/providers/base'\n\ninterface GithubUserResponse {\n  id: string\n  email: string\n  name: string\n  avatar_url: string\n}\n\nexport class GithubProvider extends BaseProvider {\n  protected provider = new GitHub(\n    process.env.GITHUB_CLIENT_ID ?? '',\n    process.env.GITHUB_CLIENT_SECRET ?? '',\n    this.createCallbackUrl('github'),\n  )\n\n  protected readonly API_URL = 'https://api.github.com/user'\n  protected readonly SCOPES = ['user:email']\n\n  public createAuthorizationURL(\n    state: string,\n    _codeVerifier: string | null,\n  ): URL {\n    return this.provider.createAuthorizationURL(state, this.SCOPES)\n  }\n\n  public async fetchUserData(\n    code: string,\n    _codeVerifier: string | null,\n  ): Promise<ProviderUserData> {\n    const tokens = await this.provider.validateAuthorizationCode(code)\n    const accessToken = tokens.accessToken()\n\n    const response = await fetch(this.API_URL, {\n      headers: { Authorization: `Bearer ${accessToken}` },\n    })\n    if (!response.ok) {\n      const errorText = await response.text().catch(() => 'Unknown error')\n      throw new Error(`Github API error (${response.status}): ${errorText}`)\n    }\n\n    const user = (await response.json()) as GithubUserResponse\n\n    return {\n      accountId: user.id,\n      email: user.email,\n      name: user.name,\n      image: user.avatar_url,\n    }\n  }\n}\n",
      "type": "registry:file",
      "target": "server/auth/providers/github.ts"
    }
  ]
}