{
  "$schema": "https://ui.shadcn.com/schema/registry-item.json",
  "name": "login-form",
  "type": "registry:block",
  "title": "Login Form",
  "description": "A login form component using Arktype to validate.",
  "dependencies": [
    "arktype"
  ],
  "registryDependencies": [
    "button",
    "card",
    "input",
    "sonner"
  ],
  "files": [
    {
      "path": "registry/form.tsx",
      "content": "import type { StandardSchemaV1 } from '@standard-schema/spec'\nimport * as React from 'react'\nimport { Slot } from '@radix-ui/react-slot'\n\nimport { cn } from '@/lib/utils'\n\nconst useForm = <TSchema extends StandardSchemaV1, TData = unknown>({\n  schema,\n  defaultValues,\n  submitFn,\n  onSuccess,\n  onError,\n  isReset,\n}: {\n  schema: TSchema\n  defaultValues: StandardSchemaV1.InferInput<TSchema>\n  submitFn: (\n    values: StandardSchemaV1.InferInput<TSchema>,\n  ) => Promise<TData> | TData\n  onSuccess?: (data: TData) => void\n  onError?: (error: string) => void\n  isReset?: boolean\n}) => {\n  const [values, setValues] = React.useState(defaultValues)\n  const [isPending, startTransition] = React.useTransition()\n  const [errors, setErrors] = React.useState<{\n    message?: string\n    fieldErrors?: Record<keyof StandardSchemaV1.InferInput<TSchema>, string>\n  }>({})\n\n  const handleSubmit = React.useCallback(\n    (e: React.FormEvent<HTMLFormElement>) => {\n      startTransition(async () => {\n        e.preventDefault()\n        e.stopPropagation()\n\n        const parsed = await standardValidate(schema, values)\n\n        if (!parsed.success) {\n          setErrors({\n            message: 'Validation error',\n            fieldErrors: parsed.fieldErrors,\n          })\n          if (onError) onError('Validation error')\n          return\n        }\n\n        try {\n          const data = await submitFn(parsed.data)\n          if (onSuccess) onSuccess(data)\n          if (isReset) setValues(defaultValues)\n          setErrors({})\n        } catch (error) {\n          if (error instanceof Error) {\n            setErrors({ message: error.message })\n            if (onError) onError(error.message)\n          } else {\n            setErrors({ message: 'Unknown error' })\n            if (onError) onError('Unknown error')\n          }\n        }\n      })\n    },\n    [defaultValues, isReset, onError, onSuccess, schema, submitFn, values],\n  )\n\n  const handleChange = (key: string, value: unknown) => {\n    setValues((prev) => ({\n      ...(prev as Record<string, unknown>),\n      [key]: value,\n    }))\n  }\n\n  const handleBlur = React.useCallback(\n    async (event: React.FocusEvent<HTMLInputElement>) => {\n      const parsed = await standardValidate(schema, values)\n\n      if (!parsed.success) {\n        setErrors((prev) => ({\n          ...prev,\n          fieldErrors: {\n            ...(prev.fieldErrors as unknown as Record<\n              keyof StandardSchemaV1.InferInput<TSchema>,\n              string\n            >),\n            [event.target.name]: parsed.fieldErrors[event.target.name as never],\n          },\n        }))\n      } else {\n        setErrors((prev) => ({\n          ...prev,\n          fieldErrors: {\n            ...(prev.fieldErrors as unknown as Record<\n              keyof StandardSchemaV1.InferInput<TSchema>,\n              string\n            >),\n            [event.target.name]: undefined,\n          },\n        }))\n      }\n    },\n    [schema, values],\n  )\n\n  return {\n    handleSubmit,\n    handleChange,\n    handleBlur,\n    isPending,\n    values,\n    errors,\n  }\n}\n\ntype FormContextValue<T extends StandardSchemaV1> = ReturnType<\n  typeof useForm<T>\n>\nconst FormContext = React.createContext<FormContextValue<StandardSchemaV1>>(\n  {} as FormContextValue<StandardSchemaV1>,\n)\n\nfunction Form<T extends StandardSchemaV1>({\n  className,\n  form,\n  ...props\n}: React.ComponentProps<'form'> & { form: FormContextValue<T> }) {\n  return (\n    <FormContext.Provider value={form}>\n      <form\n        {...props}\n        data-slot=\"form\"\n        className={cn('flex flex-col gap-4', className)}\n        onSubmit={form.handleSubmit}\n      />\n    </FormContext.Provider>\n  )\n}\n\ninterface FormFieldContextValue {\n  name: string\n  value?: string\n  error?: string\n  isPending?: boolean\n  formItemId?: string\n  formDescriptionId?: string\n  formMessageId?: string\n}\nconst FormFieldContext = React.createContext<FormFieldContextValue>(\n  {} as FormFieldContextValue,\n)\n\nfunction FormField({\n  name,\n  render,\n}: {\n  name: string\n  render: (props: {\n    name: string\n    value: string\n    onChange: (e: React.ChangeEvent<HTMLInputElement>) => void\n    onBlur: (e: React.FocusEvent<HTMLInputElement>) => Promise<void>\n  }) => React.ReactNode\n}) {\n  const form = React.use(FormContext)\n\n  return (\n    <FormFieldContext.Provider value={{ name }}>\n      {render({\n        name,\n        value: (form.values as never)[name],\n        onChange: React.useCallback(\n          (\n            event:\n              | React.ChangeEvent<HTMLInputElement>\n              | string\n              | number\n              | boolean,\n          ) => {\n            if (event && typeof event === 'object') {\n              let newValue: unknown = event.target.value\n              if (event.target.type === 'number')\n                newValue = event.target.valueAsNumber\n              else if (event.target.type === 'checkbox')\n                newValue = event.target.checked\n              else if (event.target.type === 'date')\n                newValue = event.target.valueAsDate\n\n              form.handleChange(name, newValue)\n            } else {\n              form.handleChange(name, event)\n            }\n          },\n          [form, name],\n        ),\n        onBlur: form.handleBlur,\n      })}\n    </FormFieldContext.Provider>\n  )\n}\n\ninterface FormItemContextValue {\n  id: string\n}\nconst FormItemContext = React.createContext<FormItemContextValue>(\n  {} as FormItemContextValue,\n)\n\nfunction FormItem({ className, ...props }: React.ComponentProps<'fieldset'>) {\n  const { isPending } = React.use(FormContext)\n  const id = React.useId()\n\n  return (\n    <FormItemContext.Provider value={{ id }}>\n      <fieldset\n        data-slot=\"form-item\"\n        className={cn('grid gap-2', className)}\n        disabled={isPending}\n        {...props}\n      />\n    </FormItemContext.Provider>\n  )\n}\n\nconst useFormField = () => {\n  const formContext = React.use(FormContext)\n  const fieldContext = React.use(FormFieldContext)\n  const itemContext = React.use(FormItemContext)\n\n  return {\n    id: itemContext.id,\n    name: fieldContext.name,\n    value: (formContext.values as never)[fieldContext.name],\n    error: formContext.errors.fieldErrors?.[fieldContext.name as never],\n    isPending: formContext.isPending,\n    formItemId: `${itemContext.id}-form-item`,\n    formDescriptionId: `${itemContext.id}-form-item-description`,\n    formMessageId: `${itemContext.id}-form-item-message`,\n  }\n}\n\nfunction FormLabel({ className, ...props }: React.ComponentProps<'label'>) {\n  const { formItemId, error } = useFormField()\n\n  return (\n    <label\n      data-slot=\"form-label\"\n      data-error={!!error}\n      htmlFor={formItemId}\n      className={cn(\n        'flex items-center gap-2 text-sm leading-none font-medium select-none group-data-[disabled=true]:pointer-events-none group-data-[disabled=true]:opacity-50 peer-disabled:cursor-not-allowed peer-disabled:opacity-50',\n        'data-[error=true]:text-destructive',\n        className,\n      )}\n      {...props}\n    />\n  )\n}\n\nfunction FormControl({ ...props }: React.ComponentProps<typeof Slot>) {\n  const { error, isPending, formItemId, formDescriptionId, formMessageId } =\n    useFormField()\n\n  return (\n    <Slot\n      data-slot=\"form-control\"\n      id={formItemId}\n      aria-describedby={\n        // eslint-disable-next-line @typescript-eslint/no-unnecessary-condition\n        !error ? formDescriptionId : `${formDescriptionId} ${formMessageId}`\n      }\n      aria-invalid={!!error}\n      aria-disabled={isPending}\n      {...props}\n    />\n  )\n}\n\nfunction FormDescription({\n  className,\n  ...props\n}: React.ComponentProps<'span'>) {\n  const { formDescriptionId } = useFormField()\n\n  return (\n    <span\n      data-slot=\"form-description\"\n      id={formDescriptionId}\n      className={cn('text-muted-foreground text-sm', className)}\n      {...props}\n    />\n  )\n}\n\nfunction FormMessage({ className, ...props }: React.ComponentProps<'p'>) {\n  const { formMessageId, error } = useFormField()\n\n  // eslint-disable-next-line @typescript-eslint/no-unnecessary-condition\n  const body = error ? String(error) : props.children\n\n  if (!body) {\n    return null\n  }\n\n  return (\n    <p\n      data-slot=\"form-message\"\n      id={formMessageId}\n      className={cn('text-destructive text-sm', className)}\n      {...props}\n    >\n      {body}\n    </p>\n  )\n}\n\nexport {\n  useForm,\n  Form,\n  FormField,\n  FormItem,\n  FormLabel,\n  FormControl,\n  FormDescription,\n  FormMessage,\n}\n\nconst standardValidate = async <TSchema extends StandardSchemaV1>(\n  schema: TSchema,\n  input: StandardSchemaV1.InferInput<TSchema>,\n): Promise<\n  | {\n      success: false\n      data: null\n      fieldErrors: Record<keyof StandardSchemaV1.InferOutput<TSchema>, string>\n    }\n  | {\n      success: true\n      data: StandardSchemaV1.InferOutput<TSchema>\n      fieldErrors: null\n    }\n> => {\n  let result = schema['~standard'].validate(input)\n  if (result instanceof Promise) result = await result\n\n  if (result.issues)\n    return {\n      success: false,\n      data: null,\n      fieldErrors: result.issues.reduce<Record<string, string>>(\n        (acc, issue) => ({\n          ...acc,\n          [issue.path as never]: issue.message,\n        }),\n        {},\n      ) as Record<keyof StandardSchemaV1.InferOutput<TSchema>, string>,\n    }\n\n  return {\n    success: true,\n    data: result.value,\n    fieldErrors: null,\n  }\n}\n",
      "type": "registry:ui"
    },
    {
      "path": "registry/blocks/login-form.tsx",
      "content": "'use client'\n\nimport { type } from 'arktype'\nimport { toast } from 'sonner'\n\nimport { Button } from '@/components/ui/button'\nimport {\n  Card,\n  CardContent,\n  CardDescription,\n  CardFooter,\n  CardHeader,\n  CardTitle,\n} from '@/components/ui/card'\nimport {\n  Form,\n  FormControl,\n  FormField,\n  FormItem,\n  FormLabel,\n  FormMessage,\n  useForm,\n} from '@/components/ui/form'\nimport { Input } from '@/components/ui/input'\n\nconst loginSchema = type({\n  email: type('string.email').configure({ message: 'Invalid email' }),\n  password: type(\n    /^(?=.*[a-z])(?=.*[A-Z])(?=.*\\d)(?=.*[^A-Za-z0-9]).{8,}$/,\n  ).configure({\n    message:\n      'Password must contain at least one lowercase letter, one uppercase letter, one number, and one special character',\n  }),\n})\n\nexport const LoginForm: React.FC = () => {\n  const form = useForm({\n    schema: loginSchema,\n    defaultValues: { email: '', password: '' },\n    submitFn: (values) => values,\n    onError: (e) => toast.error(e),\n    onSuccess: (data) =>\n      toast.success('Logged in successfully', {\n        description: <pre>{JSON.stringify(data, null, 2)}</pre>,\n      }),\n  })\n\n  return (\n    <Card className=\"w-svh max-w-md\">\n      <CardHeader>\n        <CardTitle>Log in</CardTitle>\n        <CardDescription>\n          Enter your email below to login to your account\n        </CardDescription>\n      </CardHeader>\n      <CardContent>\n        <Form form={form}>\n          <FormField\n            name=\"email\"\n            render={(props) => (\n              <FormItem>\n                <FormLabel>Email</FormLabel>\n                <FormControl {...props}>\n                  <Input type=\"email\" placeholder=\"yuki@gmail.com\" />\n                </FormControl>\n                <FormMessage />\n              </FormItem>\n            )}\n          />\n\n          <FormField\n            name=\"password\"\n            render={(props) => (\n              <FormItem>\n                <div className=\"flex items-center justify-between\">\n                  <FormLabel>Password</FormLabel>\n\n                  <a\n                    href=\"#\"\n                    className=\"text-sm underline-offset-4 hover:underline\"\n                  >\n                    Forgot your password?\n                  </a>\n                </div>\n                <FormControl {...props}>\n                  <Input type=\"password\" />\n                </FormControl>\n                <FormMessage />\n              </FormItem>\n            )}\n          />\n\n          <Button disabled={form.isPending} type=\"submit\">\n            Sign Up\n          </Button>\n        </Form>\n      </CardContent>\n\n      <CardFooter className=\"flex-col\">\n        <Button variant=\"outline\" className=\"w-full\">\n          Login with Google\n        </Button>\n\n        <p>\n          Don&apos;t have an account?{' '}\n          <Button variant=\"link\" className=\"p-0\">\n            Sign Up\n          </Button>\n        </p>\n      </CardFooter>\n    </Card>\n  )\n}\n",
      "type": "registry:block"
    }
  ],
  "categories": [
    "form"
  ]
}