{
  "$schema": "https://ui.shadcn.com/schema/registry-item.json",
  "name": "zod-form",
  "type": "registry:block",
  "title": "Zod Form",
  "author": "tiesen243",
  "description": "A form component using Zod to validate the form.",
  "dependencies": [
    "zod"
  ],
  "registryDependencies": [
    "button",
    "input",
    "label"
  ],
  "files": [
    {
      "path": "registry/form/zod-form.tsx",
      "content": "import type { Schema } from 'zod'\nimport * as React from 'react'\nimport { Label } from '@radix-ui/react-label'\nimport { Slot } from '@radix-ui/react-slot'\n\nimport { cn } from '@/lib/utils'\n\nconst useForm = <TValue = unknown, TData = void>({\n  schema,\n  defaultValues,\n  submitFn,\n  onSuccess,\n  onError,\n  isReset,\n}: {\n  schema: Schema<TValue>\n  defaultValues: TValue\n  submitFn: (values: TValue) => Promise<TData> | TData\n  onSuccess?: (data: TData) => void\n  onError?: (error: unknown) => void\n  isReset?: boolean\n}) => {\n  const [values, setValues] = React.useState<TValue>(defaultValues)\n  const [isPending, startTransition] = React.useTransition()\n  const [errors, setErrors] = React.useState<\n    Record<string, string[] | undefined>\n  >({})\n\n  const handleSubmit = React.useCallback(\n    (e: React.FormEvent<HTMLFormElement>) => {\n      startTransition(async () => {\n        e.preventDefault()\n        e.stopPropagation()\n\n        const parsed = schema.safeParse(values)\n\n        if (!parsed.success) setErrors(parsed.error.flatten().fieldErrors)\n        else\n          try {\n            const data = await submitFn(values)\n            if (onSuccess) onSuccess(data)\n            if (isReset) setValues(defaultValues)\n            setErrors({})\n          } catch (error) {\n            if (onError) onError(error)\n          }\n      })\n    },\n    [defaultValues, isReset, onError, onSuccess, schema, submitFn, values],\n  )\n\n  const handleChange = (key: string, value: unknown) => {\n    setValues((prev) => ({\n      ...prev,\n      [key]: value,\n    }))\n  }\n\n  const handleBlur = React.useCallback(\n    (event: React.FocusEvent<HTMLInputElement>) => {\n      const parsed = schema.safeParse(values)\n\n      if (!parsed.success) {\n        setErrors((prev) => ({\n          ...prev,\n          [event.target.name]: (parsed.error.flatten().fieldErrors as never)[\n            event.target.name\n          ],\n        }))\n      } else {\n        setErrors((prev) => ({ ...prev, [event.target.name]: undefined }))\n      }\n    },\n    [schema, values],\n  )\n\n  return {\n    handleSubmit,\n    handleChange,\n    handleBlur,\n    isPending,\n    values,\n    errors,\n  }\n}\n\ntype FormContextValue<T> = ReturnType<typeof useForm<T>>\n\nconst FormContext = React.createContext<FormContextValue<unknown>>(\n  {} as FormContextValue<unknown>,\n)\n\nfunction Form<T>({\n  className,\n  form,\n  ...props\n}: React.ComponentProps<'form'> & { form: FormContextValue<T> }) {\n  return (\n    <FormContext.Provider value={form}>\n      <form\n        {...props}\n        data-slot=\"form\"\n        className={cn('flex flex-col gap-4', className)}\n        onSubmit={form.handleSubmit}\n      />\n    </FormContext.Provider>\n  )\n}\n\ninterface FormFieldContextValue {\n  name: string\n  value?: string\n  error?: string\n  isPending?: boolean\n  formItemId?: string\n  formDescriptionId?: string\n  formMessageId?: string\n}\n\nconst FormFieldContext = React.createContext<FormFieldContextValue>(\n  {} as FormFieldContextValue,\n)\n\nfunction FormField({\n  name,\n  render,\n}: {\n  name: string\n  render: (props: {\n    value: string\n    onChange: (e: React.ChangeEvent<HTMLInputElement>) => void\n    onBlur: (e: React.FocusEvent<HTMLInputElement>) => void\n  }) => React.ReactNode\n}) {\n  const form = React.use(FormContext)\n\n  return (\n    <FormFieldContext.Provider value={{ name }}>\n      {render({\n        value: (form.values as never)[name],\n        onChange: React.useCallback(\n          (\n            event:\n              | React.ChangeEvent<HTMLInputElement>\n              | string\n              | number\n              | boolean,\n          ) => {\n            if (event && typeof event === 'object') {\n              let newValue: unknown = event.target.value\n              if (event.target.type === 'number')\n                newValue = event.target.valueAsNumber\n              else if (event.target.type === 'checkbox')\n                newValue = event.target.checked\n              else if (event.target.type === 'date')\n                newValue = event.target.valueAsDate\n\n              form.handleChange(name, newValue)\n            } else {\n              form.handleChange(name, event)\n            }\n          },\n          [form, name],\n        ),\n        onBlur: form.handleBlur,\n      })}\n    </FormFieldContext.Provider>\n  )\n}\n\ninterface FormItemContextValue {\n  id: string\n}\n\nconst FormItemContext = React.createContext<FormItemContextValue>(\n  {} as FormItemContextValue,\n)\n\nfunction FormItem({ className, ...props }: React.ComponentProps<'fieldset'>) {\n  const { isPending } = React.use(FormContext)\n  const id = React.useId()\n\n  return (\n    <FormItemContext.Provider value={{ id }}>\n      <fieldset\n        data-slot=\"form-item\"\n        className={cn('grid gap-2', className)}\n        disabled={isPending}\n        {...props}\n      />\n    </FormItemContext.Provider>\n  )\n}\n\nconst useFormField = () => {\n  const formContext = React.use(FormContext)\n  const fieldContext = React.use(FormFieldContext)\n  const itemContext = React.use(FormItemContext)\n\n  return {\n    id: itemContext.id,\n    name: fieldContext.name,\n    value: (formContext.values as never)[fieldContext.name],\n    error: formContext.errors[fieldContext.name],\n    isPending: formContext.isPending,\n    formItemId: `${itemContext.id}-form-item`,\n    formDescriptionId: `${itemContext.id}-form-item-description`,\n    formMessageId: `${itemContext.id}-form-item-message`,\n  }\n}\n\nfunction FormLabel({\n  className,\n  ...props\n}: React.ComponentProps<typeof Label>) {\n  const { formItemId, error } = useFormField()\n\n  return (\n    <Label\n      data-slot=\"form-label\"\n      data-error={!!error}\n      htmlFor={formItemId}\n      className={cn(\n        'flex items-center gap-2 text-sm leading-none font-medium select-none group-data-[disabled=true]:pointer-events-none group-data-[disabled=true]:opacity-50 peer-disabled:cursor-not-allowed peer-disabled:opacity-50',\n        'data-[error=true]:text-destructive',\n        className,\n      )}\n      {...props}\n    />\n  )\n}\n\nfunction FormControl({ ...props }: React.ComponentProps<typeof Slot>) {\n  const { error, isPending, formItemId, formDescriptionId, formMessageId } =\n    useFormField()\n\n  return (\n    <Slot\n      data-slot=\"form-control\"\n      id={formItemId}\n      aria-describedby={\n        !error ? formDescriptionId : `${formDescriptionId} ${formMessageId}`\n      }\n      aria-invalid={!!error}\n      aria-disabled={isPending}\n      {...props}\n    />\n  )\n}\n\nfunction FormDescription({\n  className,\n  ...props\n}: React.ComponentProps<'span'>) {\n  const { formDescriptionId } = useFormField()\n\n  return (\n    <span\n      data-slot=\"form-description\"\n      id={formDescriptionId}\n      className={cn('text-muted-foreground text-sm', className)}\n      {...props}\n    />\n  )\n}\n\nfunction FormMessage({ className, ...props }: React.ComponentProps<'p'>) {\n  const { formMessageId, error } = useFormField()\n\n  const body = error ? String(error) : props.children\n\n  if (!body) {\n    return null\n  }\n\n  return (\n    <p\n      data-slot=\"form-message\"\n      id={formMessageId}\n      className={cn('text-destructive text-sm', className)}\n      {...props}\n    >\n      {body}\n    </p>\n  )\n}\n\nexport {\n  useForm,\n  Form,\n  FormField,\n  FormItem,\n  FormLabel,\n  FormControl,\n  FormDescription,\n  FormMessage,\n}\n",
      "type": "registry:component"
    }
  ],
  "categories": [
    "form"
  ]
}