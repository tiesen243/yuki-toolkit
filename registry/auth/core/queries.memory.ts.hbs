'use server'

import { sha256 } from '@oslojs/crypto/sha2'
import {
  encodeBase32LowerCaseNoPadding,
  encodeHexLowerCase,
} from '@oslojs/encoding'

import type { SessionResult } from '@/server/auth/types'
import type { User } from '@/server/db/schema'
import { authOptions } from '@/server/auth/config'
import { Password } from '@/server/auth/core/password'
import { db } from '@/server/db'

async function createSession(
  userId: string,
): Promise<{ sessionToken: string; expires: Date }> {
  await new Promise((resolve) => setTimeout(resolve, 500))

  const bytes = new Uint8Array(20)
  crypto.getRandomValues(bytes)
  const sessionToken = encodeBase32LowerCaseNoPadding(bytes)

  const token = hashSHA256(sessionToken)
  const expires = new Date(Date.now() + authOptions.session.expires)

  // Store the hashed token in the database
  db.sessions.push({ token, expires, userId })
  const session = db.sessions.find((s) => s.token === token)
  if (!session) throw new Error('Failed to create session')

  // Return the unhashed token to the client along with expiration
  return { sessionToken, expires }
}

async function validateToken(token: string): Promise<SessionResult> {
  await new Promise((resolve) => setTimeout(resolve, 500))

  const sessionToken = hashSHA256(token)

  // Lookup the session and associated user in the database
  const result = db.sessions.find((s) => s.token === sessionToken)

  // Return early if session not found
  if (!result) return { expires: new Date() }
  else result.user = db.users.find((u) => u.id === result.userId)

  const { user, ...session } = result
  const now = Date.now()

  // Check if session has expired
  if (now > session.expires.getTime()) {
    db.sessions.splice(
      db.sessions.findIndex((s) => s.token === sessionToken),
      1,
    )
    return { expires: new Date() }
  }

  // Refresh session if it's beyond the refresh threshold
  if (now >= session.expires.getTime() - authOptions.session.expiresThreshold) {
    const newExpires = new Date(Date.now() + authOptions.session.expires)
    const sessionIndex = db.sessions.findIndex((s) => s.token === sessionToken)
    if (db.sessions[sessionIndex])
      db.sessions[sessionIndex].expires = newExpires
    session.expires = newExpires
  }

  return { user, expires: session.expires }
}

async function invalidateToken(token: string): Promise<void> {
  await new Promise((resolve) => setTimeout(resolve, 500))
  const sessionIndex = db.sessions.findIndex(
    (s) => s.token === hashSHA256(token),
  )
  if (sessionIndex !== -1) db.sessions.splice(sessionIndex, 1)
}

async function invalidateAllTokens(userId: string): Promise<void> {
  await new Promise((resolve) => setTimeout(resolve, 500))
  db.sessions = db.sessions.filter((s) => s.userId !== userId)
}

async function verifyCredentials(input: {
  email: string
  password: string
}): Promise<{ sessionToken: string; expires: Date }> {
  await new Promise((resolve) => setTimeout(resolve, 500))

  const user = db.users.find((u) => u.email === input.email)
  const account = db.accounts.find(
    (a) =>
      a.provider === 'credentials' &&
      a.userId === user?.id &&
      a.password === input.password,
  )

  if (
    !user ||
    !account?.password ||
    !(await new Password().verify(account.password, input.password))
  )
    throw new Error('Invalid email or password')

  return createSession(user.id)
}

async function getOrCreateUserFromOAuth(data: {
  provider: string
  accountId: string
  name: string
  email: string
  image: string
}): Promise<User> {
  await new Promise((resolve) => setTimeout(resolve, 500))

  const { provider, accountId, email } = data

  const existingAccount = db.accounts.find(
    (a) => a.provider === provider && a.accountId === accountId,
  )
  const existingUser = db.users.find((u) => u.email === email)
  if (existingUser && existingAccount) return existingUser
  else if (existingUser && !existingAccount) {
    db.accounts.push({
      provider,
      accountId,
      userId: existingUser.id,
    })
    return existingUser
  } else {
    db.users.push({
      id: crypto.randomUUID(),
      name: data.name,
      email: data.email,
      image: data.image,
      createdAt: new Date(),
      updatedAt: new Date(),
    })
    const newUser = db.users[db.users.length - 1]
    if (!newUser) throw new Error('Failed to create user')

    db.accounts.push({
      provider,
      accountId,
      userId: newUser.id,
    })

    return newUser
  }
}

function hashSHA256(str: string): string {
  return encodeHexLowerCase(sha256(new TextEncoder().encode(str)))
}

export {
  // Authentication
  verifyCredentials,
  getOrCreateUserFromOAuth,
  // Session management
  createSession,
  validateToken,
  invalidateToken,
  invalidateAllTokens,
}
