'use server'

import { sha256 } from '@oslojs/crypto/sha2'
import {
  encodeBase32LowerCaseNoPadding,
  encodeHexLowerCase,
} from '@oslojs/encoding'

import type { SessionResult } from '@/server/auth/types'
import { authOptions } from '@/server/auth/config'
import { Password } from '@/server/auth/core/password'
import { db } from '@/server/db'

async function createSession(
  userId: string,
): Promise<{ sessionToken: string; expires: Date }> {
  const bytes = new Uint8Array(20)
  crypto.getRandomValues(bytes)
  const sessionToken = encodeBase32LowerCaseNoPadding(bytes)

  const token = hashSHA256(sessionToken)
  const expires = new Date(Date.now() + authOptions.session.expires)

  // Store the hashed token in the database
  const session = await db.session.create({ token, expires, userId })
  if (!session) throw new Error('Failed to create session')

  // Return the unhashed token to the client along with expiration
  return { sessionToken, expires: session.expires }
}

async function validateToken(token: string): Promise<SessionResult> {
  const sessionToken = hashSHA256(token)

  // Lookup the session and associated user in the database
  const session = await db.session.findOne({ token: sessionToken })
  const user = await db.user.findOne({ _id: session?.userId })

  // Return early if session not found
  if (!session || !user) return { expires: new Date() }

  const now = Date.now()

  // Check if session has expired
  if (now > session.expires.getTime()) {
    await db.session.findOneAndDelete({ token: sessionToken })
    return { expires: new Date() }
  }

  // Refresh session if it's beyond the refresh threshold
  if (now >= session.expires.getTime() - authOptions.session.expiresThreshold) {
    const newExpires = new Date(Date.now() + authOptions.session.expires)
    await db.session.findOneAndUpdate(
      { token: sessionToken },
      { $set: { expires: newExpires } },
      { new: true },
    )
    session.expires = newExpires
  }

  return { user, expires: session.expires }
}

async function invalidateToken(token: string): Promise<void> {
  await db.session.findOneAndDelete({ token: hashSHA256(token) })
}

async function invalidateAllTokens(userId: string): Promise<void> {
  await db.session.deleteMany({ userId })
}

async function verifyCredentials(input: {
  email: string
  password: string
}): Promise<{ sessionToken: string; expires: Date }> {
  const user = await db.user.findOne({ email: input.email })
  const account = await db.account.findOne({
    provider: 'credentials',
    accountId: user?._id,
  })

  if (
    !user ||
    !account?.password ||
    !(await new Password().verify(account.password, input.password))
  )
    throw new Error('Invalid email or password')

  return createSession(user.id)
}

async function getOrCreateUserFromOAuth(data: {
  provider: string
  accountId: string
  name: string
  email: string
  image: string
}): Promise<any> {
  const { provider, accountId, email } = data

  const existingAccount = await db.account.findOne({ provider, accountId })
  let existingUser = await db.user.findOne({ _id: existingAccount?.userId })
  if (existingUser) return existingUser

  existingUser = await db.user.findOne({ email })
  if (existingUser) {
    await db.account.create({
      provider,
      accountId,
      userId: existingUser._id,
    })
    return existingUser
  }

  const newUser = await db.user.create(data)
  if (!newUser) throw new Error('Failed to create user')

  await db.account.create({ provider, accountId, userId: newUser._id })
  return newUser
}

function hashSHA256(str: string): string {
  return encodeHexLowerCase(sha256(new TextEncoder().encode(str)))
}

export {
  // Authentication
  verifyCredentials,
  getOrCreateUserFromOAuth,
  // Session management
  createSession,
  validateToken,
  invalidateToken,
  invalidateAllTokens,
}
