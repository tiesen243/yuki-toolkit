'use server'

import { sha256 } from '@oslojs/crypto/sha2'
import {
  encodeBase32LowerCaseNoPadding,
  encodeHexLowerCase,
} from '@oslojs/encoding'

import type { SessionResult, User } from '@/server/auth/types'
import { authOptions } from '@/server/auth/config'
import { Password } from '@/server/auth/core/password'

async function createSession(
  userId: string,
): Promise<{ sessionToken: string; expires: Date }> {
  await new Promise((resolve) => setTimeout(resolve, 500))

  const bytes = new Uint8Array(20)
  crypto.getRandomValues(bytes)
  const sessionToken = encodeBase32LowerCaseNoPadding(bytes)

  const token = hashSHA256(sessionToken)
  const expires = new Date(Date.now() + authOptions.session.expires)

  // Store the hashed token in the database
  // ...

  // Return the unhashed token to the client along with expiration
  return { sessionToken, expires }
}

async function validateToken(token: string): Promise<SessionResult> {
  await new Promise((resolve) => setTimeout(resolve, 500))

  const sessionToken = hashSHA256(token)

  return { user: undefined, expires: new Date() }
}

async function invalidateToken(token: string): Promise<void> {
  await new Promise((resolve) => setTimeout(resolve, 500))
  // Remove the hashed token from the database
}

async function invalidateAllTokens(userId: string): Promise<void> {
  await new Promise((resolve) => setTimeout(resolve, 500))
  // Remove all tokens for the user from the database
}

async function verifyCredentials(input: {
  email: string
  password: string
}): Promise<{ sessionToken: string; expires: Date }> {
  await new Promise((resolve) => setTimeout(resolve, 500))

  return createSession('177013')
}

async function getOrCreateUserFromOAuth(data: {
  provider: string
  accountId: string
  name: string
  email: string
  image: string
}): Promise<User> {
  await new Promise((resolve) => setTimeout(resolve, 500))

  const { provider, accountId, email } = data

  return {
    id: '177013',
    name: data.name,
    email,
    image: data.image,
    createdAt: new Date(),
    updatedAt: new Date(),
  }
}

function hashSHA256(str: string): string {
  return encodeHexLowerCase(sha256(new TextEncoder().encode(str)))
}

export {
  // Authentication
  verifyCredentials,
  getOrCreateUserFromOAuth,
  // Session management
  createSession,
  validateToken,
  invalidateToken,
  invalidateAllTokens,
}
