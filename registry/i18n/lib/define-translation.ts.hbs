interface ParameterTypeMap {
  number: Intl.NumberFormatOptions
  date: Intl.DateTimeFormatOptions
  list: Intl.ListFormatOptions
  plural: Partial<Record<Exclude<Intl.LDMLPluralRule, 'other'>, string>> & {
    other: string
    formatter?: Intl.NumberFormatOptions
    type?: Intl.PluralRuleType
  }
  enum: Record<string, string>
}

type ParseOptionType<
  ParamType extends keyof ParameterTypeMap,
  ParamName extends string,
> = ParamType extends 'plural' | 'enum'
  ? { [K in ParamType]: Record<ParamName, ParameterTypeMap[K]> }
  : { [K in ParamType]?: Partial<Record<ParamName, ParameterTypeMap[K]>> }

type ExtractParamOptions<S extends string> =
  S extends `${string}{${infer Param}}${infer Rest}`
    ? Param extends `${infer Name}:${infer Type}`
      ? Type extends keyof ParameterTypeMap
        ? ParseOptionType<Type, Name> & ExtractParamOptions<Rest>
        : ExtractParamOptions<Rest>
      : ExtractParamOptions<Rest>
    : Record<string, never>

interface ParamOptions {
  date?: Record<string, ParameterTypeMap['date']>
  number?: Record<string, ParameterTypeMap['number']>
  list?: Record<string, ParameterTypeMap['list']>
  plural?: Record<string, ParameterTypeMap['plural']>
  enum?: Record<string, ParameterTypeMap['enum']>
}

type ValidatedOptions<S extends string> =
  ExtractParamOptions<S> extends Record<string, never>
    ? ParamOptions | undefined
    : ExtractParamOptions<S>

function defineTranslation<S extends string>(template: S): [S, undefined]
function defineTranslation<S extends string, O extends ValidatedOptions<S>>(
  template: S,
  options: O,
): [S, O]
function defineTranslation<S extends string, O extends ValidatedOptions<S>>(
  template: S,
  options?: O,
): [S, O | undefined] {
  return [template, options]
}

export type { ParamOptions }
export { defineTranslation as dt }
