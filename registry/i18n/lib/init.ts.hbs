import type { dt, ParamOptions } from '@/lib/i18n/define-translation'
import type { Register } from '@/lib/i18n/register'

export type RegisteredTranslations = Register extends { translations: infer T }
  ? T extends infer Translations
    ? Translations
    : never
  : LanguageMessages

type I18nMessage = string | ReturnType<typeof dt>

export interface LanguageMessages {
  [key: string]: I18nMessage | LanguageMessages
}

type Join<K, P> = K extends string
  ? P extends string
    ? `${K}.${P}`
    : never
  : never

type DotPathsFor<T extends object = RegisteredTranslations> = {
  [K in keyof T]: T[K] extends I18nMessage
    ? K
    : T[K] extends object
      ? Join<K, DotPathsFor<T[K]>>
      : never
}[keyof T]

type EnumMap = Record<string, Record<string, string>>

type ParseArgType<
  ParamType extends string,
  ParamName extends string,
  Enums extends EnumMap,
> = ParamType extends 'number' | 'plural'
  ? number
  : ParamType extends 'date'
    ? Date
    : ParamType extends 'list'
      ? string[]
      : ParamType extends 'enum'
        ? ParamName extends keyof Enums
          ? keyof Enums[ParamName]
          : never
        : never

type ExtractParamArgs<
  S extends string,
  Enums extends EnumMap,
> = S extends `${string}{${infer Param}}${infer Rest}`
  ? Param extends `${infer Name}:${infer Type}` // If the string contains a parameter
    ? { [K in Name]: ParseArgType<Type, Name, Enums> } & ExtractParamArgs<
        Rest,
        Enums
      > // If the string contains a parameter with a type
    : { [K in Param]: string } & ExtractParamArgs<Rest, Enums> // If the string has no parameter type
  : unknown // If the string has no parameters

type TranslationAtKeyWithParams<
  Translations,
  Key extends string,
> = Key extends `${infer First}.${infer Rest}`
  ? First extends keyof Translations
    ? TranslationAtKeyWithParams<Translations[First], Rest>
    : never
  : Key extends keyof Translations
    ? Translations[Key]
    : never

type NormalizedTranslationAtKey<T> =
  T extends ReturnType<typeof dt> ? T : [T, ReturnType<typeof dt>[1]]

type NormalizedTranslationAtKeyWithParams<Key extends string> =
  NormalizedTranslationAtKey<
    TranslationAtKeyWithParams<RegisteredTranslations, Key>
  >

type Params<S extends DotPathsFor> = ExtractParamArgs<
  NormalizedTranslationAtKeyWithParams<S>[0],
  NormalizedTranslationAtKeyWithParams<S>[1] extends {
    enum: infer E
  }
    ? keyof E extends never
      ? EnumMap
      : E
    : EnumMap
>

type PathsWithParams = {
  [K in DotPathsFor]: keyof Params<K> extends never ? never : K
}[DotPathsFor]

type PathsWithNoParams = {
  [K in DotPathsFor]: keyof Params<K> extends never ? K : never
}[DotPathsFor]

interface I18nOptions {
  defaultLocale: string
  fallbackLocale: string | string[]
  translations: Record<Lowercase<string>, LanguageMessages>
}

interface TranslationFn {
  // eslint-disable-next-line @typescript-eslint/no-unnecessary-type-parameters
  <S extends PathsWithNoParams>(key: S, locale?: string): string
  // eslint-disable-next-line @typescript-eslint/no-unnecessary-type-parameters
  <S extends PathsWithParams, A extends Params<S>>(
    key: S,
    args: A,
    locale?: string,
  ): string
  // eslint-disable-next-line @typescript-eslint/no-unnecessary-type-parameters
  <S extends DotPathsFor, A extends Params<S>>(
    key: S,
    args?: A,
    locale?: string,
  ): string
}

function initI18n(options: I18nOptions) {
  const { defaultLocale, fallbackLocale, translations } = options

  const fallbackLocales = Array.isArray(fallbackLocale)
    ? fallbackLocale
    : [fallbackLocale]

  // Pre-compute and cache all locale hierarchies
  const orderedLocales = new Set([
    ...getOrderedLocaleAndParentLocales(defaultLocale),
    ...fallbackLocales.flatMap(getOrderedLocaleAndParentLocales),
  ])

  const localeCache = new Map<string, string[]>()

  // Pre-compile common parameter regex patterns
  const paramRegexCache = new Map<string, RegExp>()

  // Cache for lowercase locale lookups
  const lowercaseCache = new Map<string, string>()

  const getTargetLocales = (locale: string): string[] => {
    if (locale === defaultLocale) return Array.from(orderedLocales)

    if (!localeCache.has(locale)) {
      const locales = [
        ...getOrderedLocaleAndParentLocales(locale),
        ...orderedLocales,
      ]
      localeCache.set(locale, locales)
    }
    return localeCache.get(locale) ?? []
  }

  const getLowercaseLocale = (locale: string): string => {
    if (!lowercaseCache.has(locale)) {
      lowercaseCache.set(locale, locale.toLowerCase())
    }
    return lowercaseCache.get(locale) ?? ''
  }

  const t: TranslationFn = <S extends DotPathsFor>(
    key: S,
    args?: Params<S>,
    locale: string = defaultLocale,
  ) => {
    // Handle overloaded parameters more efficiently
    const actualArgs = typeof args === 'string' ? undefined : args
    const actualLocale = typeof args === 'string' ? args : locale

    const targetLocales = getTargetLocales(actualLocale)

    for (const targetLocale of targetLocales) {
      const lowercaseLocale = getLowercaseLocale(targetLocale)
      const translationFile = translations[lowercaseLocale as Lowercase<string>]

      if (translationFile) {
        const translation = getTranslation(
          targetLocale,
          translationFile,
          key,
          actualArgs,
          paramRegexCache,
        )
        if (translation) return translation
      }
    }
    return key
  }

  return { t }
}

function getOrderedLocaleAndParentLocales(locale: string) {
  const locales = []
  let parentLocale = locale
  while (parentLocale !== '') {
    locales.push(parentLocale)
    // More efficient parent locale extraction
    const lastDashIndex = parentLocale.lastIndexOf('-')
    parentLocale = lastDashIndex > 0 ? parentLocale.slice(0, lastDashIndex) : ''
  }
  return locales
}

function getTranslation<S extends DotPathsFor>(
  locale: string,
  translations: LanguageMessages,
  key: S,
  args?: Params<S>,
  regexCache?: Map<string, RegExp>,
) {
  const translation = getTranslationByKey(translations, key)
  if (!translation) return undefined

  const argObj = args ?? {}

  try {
    if (typeof translation === 'string') {
      return performSubstitution(locale, translation, argObj, {}, regexCache)
    }

    if (Array.isArray(translation)) {
      const [str, translationParams] = translation as [string, ParamOptions]
      return performSubstitution(
        locale,
        str,
        argObj,
        translationParams,
        regexCache,
      )
    }
  } catch {
    return undefined
  }

  return undefined
}

function getTranslationByKey(
  obj: LanguageMessages,
  key: string,
): I18nMessage | undefined {
  // Fast path for simple keys (no dots)
  if (!key.includes('.')) {
    const result = obj[key]
    return typeof result === 'string' || Array.isArray(result)
      ? result
      : undefined
  }

  // Optimized path traversal for nested keys
  const keys = key.split('.')
  let current: LanguageMessages | I18nMessage | null = obj

  for (let i = 0; i < keys.length; i++) {
    if (
      typeof current !== 'object' ||
      current === null ||
      Array.isArray(current)
    ) {
      return undefined
    }

    current = current[keys[i] as unknown as string] as
      | LanguageMessages
      | I18nMessage
      | null

    // eslint-disable-next-line @typescript-eslint/no-unnecessary-condition
    if (current === undefined) return undefined

    // Check if we've reached a terminal value
    if (typeof current === 'string' || Array.isArray(current)) {
      return i === keys.length - 1 ? current : undefined
    }
  }

  return undefined
}

const substitutionHandlers = {
  plural: (
    locale: string,
    argValue: unknown,
    argKey: string,
    translationParams: ParamOptions,
  ) => {
    if (typeof argValue !== 'number')
      throw new Error(`Invalid plural argument for ${argKey}`)

    const pluralMap = translationParams.plural?.[argKey]
    if (!pluralMap)
      throw new Error(`Missing plural configuration for ${argKey}`)

    // Cache PluralRules instances for better performance
    const pluralRules = new Intl.PluralRules(locale, { type: pluralMap.type })
    const category = pluralRules.select(argValue)
    const template = pluralMap[category] ?? pluralMap.other

    if (!template) throw new Error(`Missing plural template for ${category}`)

    // Optimize number formatting with caching potential
    const numberFormatter = new Intl.NumberFormat(locale, pluralMap.formatter)
    return template.replace('{?}', numberFormatter.format(argValue))
  },

  enum: (
    _locale: string,
    argValue: unknown,
    argKey: string,
    translationParams: ParamOptions,
  ) => {
    if (typeof argValue !== 'string')
      throw new Error(`Invalid enum argument for ${argKey}`)

    const enumMap = translationParams.enum?.[argKey]
    if (!enumMap) throw new Error(`Missing enum configuration for ${argKey}`)

    const replacement = enumMap[argValue]
    if (replacement === undefined)
      throw new Error(`Missing enum value ${argValue} for ${argKey}`)

    return replacement
  },

  number: (
    locale: string,
    argValue: unknown,
    argKey: string,
    translationParams: ParamOptions,
  ) => {
    if (typeof argValue !== 'number')
      throw new Error(`Invalid number argument for ${argKey}`)

    const formatter = new Intl.NumberFormat(
      locale,
      translationParams.number?.[argKey],
    )
    return formatter.format(argValue)
  },

  list: (
    locale: string,
    argValue: unknown,
    argKey: string,
    translationParams: ParamOptions,
  ) => {
    if (!Array.isArray(argValue))
      throw new Error(`Invalid list argument for ${argKey}`)

    const formatter = new Intl.ListFormat(
      locale,
      translationParams.list?.[argKey],
    )
    return formatter.format(argValue)
  },

  date: (
    locale: string,
    argValue: unknown,
    argKey: string,
    translationParams: ParamOptions,
  ) => {
    if (!(argValue instanceof Date))
      throw new Error(`Invalid date argument for ${argKey}`)

    const formatter = new Intl.DateTimeFormat(
      locale,
      translationParams.date?.[argKey],
    )
    return formatter.format(argValue)
  },
} as const

function performSubstitution(
  locale: string,
  str: string,
  args: Record<string, unknown>,
  translationParams: ParamOptions,
  regexCache?: Map<string, RegExp>,
): string {
  // Early return if no args to process
  if (Object.keys(args).length === 0) return str

  let result = str

  // Process all substitutions in a single pass when possible
  for (const [argKey, argValue] of Object.entries(args)) {
    const regexKey = `{${argKey}:?([^}]*)?}`
    let regex = regexCache?.get(regexKey)

    if (!regex) {
      regex = new RegExp(regexKey, 'g') // Add global flag for better performance
      regexCache?.set(regexKey, regex)
    }

    // Reset regex state for reuse
    regex.lastIndex = 0
    const match = regex.exec(result)

    if (!match) continue

    const [replaceKey, argType] = match

    try {
      if (argType && argType in substitutionHandlers) {
        const handler =
          substitutionHandlers[argType as keyof typeof substitutionHandlers]
        const replacement = handler(locale, argValue, argKey, translationParams)
        result = result.replace(replaceKey, replacement)
      } else {
        // Optimize string conversion - avoid unnecessary String() calls
        const replacement = argValue == null ? '' : String(argValue as unknown)
        result = result.replace(replaceKey, replacement)
      }
    } catch {
      // On error, fallback to key replacement
      result = result.replace(replaceKey, `{${argKey}}`)
    }
  }

  return result
}

export type { I18nOptions, TranslationFn }
export { initI18n }
